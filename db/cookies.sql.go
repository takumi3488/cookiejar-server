// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cookies.sql

package db

import (
	"context"
)

const getCookiesByHost = `-- name: GetCookiesByHost :one
SELECT host, cookies FROM cookies WHERE host = $1
`

func (q *Queries) GetCookiesByHost(ctx context.Context, host string) (Cookie, error) {
	row := q.db.QueryRowContext(ctx, getCookiesByHost, host)
	var i Cookie
	err := row.Scan(&i.Host, &i.Cookies)
	return i, err
}

const listCookies = `-- name: ListCookies :many
SELECT host, cookies FROM cookies
`

func (q *Queries) ListCookies(ctx context.Context) ([]Cookie, error) {
	rows, err := q.db.QueryContext(ctx, listCookies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cookie
	for rows.Next() {
		var i Cookie
		if err := rows.Scan(&i.Host, &i.Cookies); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCookies = `-- name: UpsertCookies :exec
INSERT INTO cookies (host, cookies) VALUES ($1, $2)
ON CONFLICT (host) DO UPDATE SET cookies = $2
`

type UpsertCookiesParams struct {
	Host    string `json:"host"`
	Cookies string `json:"cookies"`
}

func (q *Queries) UpsertCookies(ctx context.Context, arg UpsertCookiesParams) error {
	_, err := q.db.ExecContext(ctx, upsertCookies, arg.Host, arg.Cookies)
	return err
}
